/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.assets.web.api.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Size;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-26T02:03:28.884163600+02:00[Europe/Madrid]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "asset", description = "Asset management operations")
@RequestMapping("${openapi.assetManager.base-path:}")
public interface AssetApi {

    /**
     * GET /api/mgmt/1/assets/{id} : Get asset by ID
     * Returns a single asset by its unique identifier. Use this endpoint to check the status and details of a specific asset.
     *
     * @param id Unique asset identifier (UUID) (required)
     * @return Asset found (status code 200)
     *         or Asset not found (status code 404)
     *         or Unauthorized - missing or invalid API key (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "getAssetById",
        summary = "Get asset by ID",
        description = "Returns a single asset by its unique identifier. Use this endpoint to check the status and details of a specific asset.",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asset found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Asset.class))
            }),
            @ApiResponse(responseCode = "404", description = "Asset not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - missing or invalid API key"),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/mgmt/1/assets/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Asset> getAssetById(
        @Parameter(name = "id", description = "Unique asset identifier (UUID)", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/mgmt/1/assets/ : Search and filter uploaded assets
     * Allows searching and filtering all uploaded/registered assets. Supports filtering by date range, filename pattern (with wildcard &#39;*&#39;),  and content type. Results are sorted by upload date.
     *
     * @param uploadDateStart The start date for the upload date range filter. Must be in ISO-8601 format with UTC timezone. (optional)
     * @param uploadDateEnd The end date for the upload date range filter. Must be in ISO-8601 format with UTC timezone. (optional)
     * @param filename Filename pattern for filtering. Use &#39;*&#39; as wildcard. Examples: &#39;document*&#39;, &#39;*.pdf&#39;, &#39;image_*&#39; (optional)
     * @param filetype MIME type for file filtering. Examples: &#39;image/jpeg&#39;, &#39;application/pdf&#39;, &#39;text/plain&#39; (optional)
     * @param sortDirection Sort direction by upload date (optional, default to DESC)
     * @return Returns a list of assets matching the specified criteria (status code 200)
     *         or Malformed request - invalid parameters (status code 400)
     *         or Unauthorized - missing or invalid API key (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "getAssetsByFilter",
        summary = "Search and filter uploaded assets",
        description = "Allows searching and filtering all uploaded/registered assets. Supports filtering by date range, filename pattern (with wildcard '*'),  and content type. Results are sorted by upload date.",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list of assets matching the specified criteria", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Asset.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Malformed request - invalid parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - missing or invalid API key"),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/mgmt/1/assets/",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Asset>> getAssetsByFilter(
        @Parameter(name = "uploadDateStart", description = "The start date for the upload date range filter. Must be in ISO-8601 format with UTC timezone.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uploadDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime uploadDateStart,
        @Parameter(name = "uploadDateEnd", description = "The end date for the upload date range filter. Must be in ISO-8601 format with UTC timezone.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uploadDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime uploadDateEnd,
        @Size(min = 1) @Parameter(name = "filename", description = "Filename pattern for filtering. Use '*' as wildcard. Examples: 'document*', '*.pdf', 'image_*'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filename", required = false) String filename,
        @Size(min = 1) @Parameter(name = "filetype", description = "MIME type for file filtering. Examples: 'image/jpeg', 'application/pdf', 'text/plain'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filetype", required = false) String filetype,
        @Parameter(name = "sortDirection", description = "Sort direction by upload date", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortDirection", required = false, defaultValue = "DESC") String sortDirection
    );


    /**
     * POST /api/mgmt/1/assets/actions/upload : Performs an upload of the requested asset file
     * Performs an asynchronous upload of the requested asset file.  Returns 202 Accepted immediately and processes the file in the background. The file content must be provided as Base64 encoded string.
     *
     * @param assetFileUploadRequest File upload request with Base64 encoded content (required)
     * @return The operation was accepted by the backend (status code 202)
     *         or Bad request - invalid input data (status code 400)
     *         or Unauthorized - missing or invalid API key (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "uploadAssetFile",
        summary = "Performs an upload of the requested asset file",
        description = "Performs an asynchronous upload of the requested asset file.  Returns 202 Accepted immediately and processes the file in the background. The file content must be provided as Base64 encoded string.",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "202", description = "The operation was accepted by the backend", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetFileUploadResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - invalid input data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - missing or invalid API key", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/mgmt/1/assets/actions/upload",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<AssetFileUploadResponse> uploadAssetFile(
        @Parameter(name = "AssetFileUploadRequest", description = "File upload request with Base64 encoded content", required = true) @Valid @RequestBody AssetFileUploadRequest assetFileUploadRequest
    );

}
